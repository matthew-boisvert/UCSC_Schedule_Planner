from __future__ import print_function
import datetime
import pickle
import os.path
import datefinder
import pprint as pp
import rfc3339
import tzlocal
import re
import course_finder
import course_info_parser

from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request




def add_class_to_calendar(service, db_row, attendees=None, location=None):
    parser = course_info_parser.CourseInfoParser()
    first_day_info = parser.get_first_day_info(db_row)
    quarter_end = parser.get_quarter_end(first_day_info["end"])
    meeting_days = parser.get_meeting_days(db_row)
    return add_event_to_calendar(service, first_day_info["start"], first_day_info["end"], meeting_days, quarter_end, db_row.class_name, attendees, "This event was generated by the UCSC Schedule Planner", "Santa Cruz, California")




def add_event_to_calendar(service, start_time, end_time, meeting_days, end_date, summary,attendees=None, description=None, location=None):
    local_timezone = tzlocal.get_localzone().zone

    start_time = rfc3339.rfc3339(start_time, utc=False, use_system_timezone=True)
    end_time = rfc3339.rfc3339(end_time, utc=False, use_system_timezone=True)
    print("Start time: " + start_time)
    print("End time: " + end_time)
    end_date = end_date.strftime("%Y%m%dT000000Z")


    event = {
        'summary': summary,
        'location': location,
        'description': description,
        'start': {
            'dateTime': start_time,
            'timeZone': local_timezone,
        },
        'end': {
            'dateTime': end_time,
            'timeZone': local_timezone,
        },
        'recurrence': [
            'RRULE:FREQ=WEEKLY;BYDAY=' + meeting_days + ';UNTIL='+end_date
        ],
        'attendees': [
            {'email': 'mboisver@ucsc.edu'},
        ],
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'email', 'minutes': 24 * 60},
                {'method': 'popup', 'minutes': 10},
            ],
        },

    }

    event = service.events().insert(calendarId='primary', body=event).execute()
    print(event.get('htmlLink'))
    return(event.get('htmlLink'))





def update_calendar(class_name, email):
    SCOPES = ['https://www.googleapis.com/auth/calendar']

    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('calendar', 'v3', credentials=creds)

    # Call the Calendar API
    now = datetime.datetime.utcnow().isoformat() + 'Z' # 'Z' indicates UTC time
    controller = course_finder.DatabaseController()
    msg = str(add_class_to_calendar(service, controller.find_course(course_name=class_name), email, "Santa Cruz, California"))
    print("should send this msg: " + msg)
    return msg

def main():
    update_calendar("CSE 138", "mboisver@ucsc.edu")


if __name__ == '__main__':
    main()

